#include <iostream>
#include <winbgim.h>
#include <math.h>

using namespace std;

typedef int matrizMapa[50][50];

        matrizMapa map1 ={
        {1,1,1,1,1,1,1,1,1,1,1,1,1},
        {1,2,1,0,0,0,0,0,0,0,0,0,1},
        {1,0,1,0,1,1,1,1,1,1,1,0,1},
        {1,0,1,0,3,0,0,0,1,0,0,0,1},
        {1,0,1,1,1,0,1,0,1,0,1,0,1},
        {1,0,1,0,1,0,1,0,1,0,1,0,1},
        {1,0,1,0,1,0,1,0,1,0,1,0,1},
        {1,0,1,0,3,0,1,1,1,0,1,0,1},
        {1,0,1,1,3,1,1,0,0,0,1,0,1},
        {1,0,1,0,0,0,1,0,1,1,1,0,1},
        {1,0,0,0,0,0,1,0,1,0,0,0,1},
        {1,1,1,1,1,1,1,1,1,1,1,1,1}
        };

        matrizMapa map2 = {
        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
        {1,2,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1},
        {1,1,1,1,1,0,0,1,1,0,1,0,1,1,0,1,0,1,0,1},
        {1,3,0,0,1,1,3,1,1,1,1,0,0,1,0,1,0,1,0,1},
        {1,1,0,0,3,0,0,1,1,0,1,1,1,1,0,1,0,1,0,1},
        {1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1},
        {1,1,0,0,0,1,1,0,0,3,1,1,1,1,1,1,0,1,0,1},
        {1,0,0,1,0,1,3,3,0,0,3,0,0,0,0,1,0,1,0,1},
        {1,0,1,1,0,1,1,1,1,1,3,1,1,1,0,1,0,0,0,1},
        {1,0,0,1,1,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1},
        {1,0,0,3,0,0,1,1,1,1,0,1,0,1,0,0,0,0,0,1},
        {1,3,0,1,0,1,1,0,0,0,1,1,3,1,1,1,1,1,0,1},
        {1,1,1,1,0,0,1,1,1,0,1,0,0,0,1,0,0,1,0,1},
        {1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,1,1,0,1},
        {1,0,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1},
        {1,0,1,0,1,0,0,1,1,0,0,0,1,1,1,1,0,0,1,1},
        {1,0,0,0,3,0,0,0,1,0,1,0,0,0,0,0,3,0,1,1},
        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
        };

        matrizMapa map3 = {
        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
        {1,0,1,1,1,0,0,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1},
        {1,0,3,0,0,1,0,0,0,0,1,0,1,0,0,0,1,1,1,1,1,1,1,1,0,1,0,1,0,1,1,1,1,0,1,0,1},
        {1,0,1,0,0,3,0,0,1,0,1,0,1,1,1,1,0,1,0,0,0,0,0,1,3,1,0,1,0,3,0,0,1,0,1,0,1},
        {1,0,1,1,1,0,3,1,1,3,1,0,0,1,1,0,0,1,0,1,1,1,0,0,0,1,0,1,1,0,1,0,1,0,1,0,1},
        {1,0,0,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,0,1,3,0,0,0,0,1,0,0,1,0,1,0,1,0,0,0,1},
        {1,1,0,1,0,1,0,0,0,0,1,1,0,0,3,0,0,1,0,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1},
        {1,0,0,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,1},
        {1,0,1,1,0,1,0,1,0,0,0,1,1,1,0,0,0,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1},
        {1,0,0,1,0,1,0,0,0,1,0,0,0,3,0,0,0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,1},
        {1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,3,1,1,1,0,1,0,1,0,1,1,1,1,1,1,0,1,1,0,1,0,1},
        {1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,1,0,0,0,0,0,0,1,0,1,0,0,1,0,1},
        {1,1,1,1,3,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,1,0,1,0,1,1,0,1},
        {1,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,1,0,0,1,0,1},
        {1,0,1,1,0,1,0,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,1,1,1,1,1,0,1,1,0,1,0,1},
        {1,0,1,0,0,1,1,1,1,0,1,1,1,0,1,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,1,0,1},
        {1,0,1,1,1,1,0,0,3,0,0,0,1,0,0,0,1,0,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,0,0,0,1},
        {1,0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,3,0,0,0,1,1,1,1,1},
        {1,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,1,3,0,1,1,3,0,0,1,2,1},
        {1,0,0,0,1,3,1,1,0,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,1},
        {1,0,1,0,1,0,0,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,1,1,0,1,1},
        {1,0,1,1,1,1,0,1,0,1,0,1,0,0,0,1,0,1,1,1,1,1,1,1,1,1,0,0,0,1,0,1,0,0,0,0,1},
        {1,0,0,0,0,0,0,1,0,1,0,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,0,1},
        {1,0,1,1,1,1,0,1,0,1,0,1,0,0,0,1,0,1,1,3,0,1,1,1,1,0,1,1,3,1,0,0,0,3,0,1,1},
        {1,0,0,3,0,0,1,1,1,1,0,1,0,1,0,1,0,0,3,0,0,1,0,0,1,0,0,0,0,1,3,0,3,1,0,0,1},
        {1,1,1,1,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,0,1},
        {1,0,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,3,0,1,0,0,0,1,0,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1},
        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
        };

class Graficos {
    public:
        void personaje(int x, int y, int e, int color1, int color2) {
            setfillstyle(1, color2);
            bar(x + e * 0.39, y + e * 0.37, x + e * 0.63, y + e * 0.70);

            setfillstyle(1, color1);
            fillellipse(x + e * 0.5, y + e * 0.25, e * 0.1, e * 0.1);
            bar(x + e * 0.32, y + e * 0.37, x + e * 0.37, y + e * 0.70);
            bar(x + e * 0.65, y + e * 0.37, x + e * 0.70, y + e * 0.70);
            bar(x + e * 0.43, y + e * 0.72, x + e * 0.49, y + e * 0.9);
            bar(x + e * 0.52, y + e * 0.72, x + e * 0.59, y + e * 0.9);
        }

    void salida(int x, int y, int e, int color) {
        setcolor(0);
        setfillstyle(1, 7);
        bar(x, y, x + e, y + e);

        setfillstyle(1, 6);
        bar(x + e * 0.25, y + e * 0.25, x + e * 0.75, y + e);
        setfillstyle(1, color);
        bar(x + e * 0.28, y + e * 0.4, x + e * 0.45, y + e * 0.55);
        bar(x + e * 0.28, y + e * 0.6, x + e * 0.45, y + e * 0.75);
        bar(x + e * 0.28, y + e * 0.8, x + e * 0.45, y + e * 0.95);

        bar(x + e * 0.5, y + e * 0.4, x + e * 0.65, y + e * 0.55);
        bar(x + e * 0.5, y + e * 0.6, x + e * 0.65, y + e * 0.75);
        bar(x + e * 0.5, y + e * 0.8, x + e * 0.65, y + e * 0.95);

        arc(x + e * 0.5, y + e * 0.26, 0, 180, e * 0.25);
        arc(x + e * 0.5, y + e * 0.26, 0, 180, e * 0.20);
        arc(x + e * 0.5, y + e * 0.26, 0, 180, e * 0.15);
        arc(x + e * 0.5, y + e * 0.26, 0, 180, e * 0.10);

        setfillstyle(1, 14);
        fillellipse(x + e * 0.72, y + e * 0.7, e / 18, e / 18);
    }

    void bloque(int x, int y, int e, int color) {
        setfillstyle(1, color);
        bar(x, y, x + e, y + e);
        setcolor(0);
        rectangle(x, y, x + e, y + e);
    }

    void caja(int x, int y, int e, int color) {
        setcolor(0);
        setfillstyle(1, color);
        bar(x + 4, y + 4, x + e - 4, y + e - 4);
        rectangle(x + 8, y + 8, x + e - 8, y + e - 8);
        line(x + 8, y + 8, x + e - 8, y + e - 8);
        line(x + e - 8, y + 8, x + 8, y + e - 8);
    }

    void dibujarMapa(int x, int y, int e, int color, int color2, int row, int col, matrizMapa * m) {
        setcolor(0);
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if ( * ( * ( * m + i) + j) == 0) {
                    bloque(x + j * e, y + i * e, e, 0);
                } else
                if ( * ( * ( * m + i) + j) == 1) {
                    bloque(x + j * e, y + i * e, e, color);
                } else if ( * ( * ( * m + i) + j) == 2) {
                    setfillstyle(1, color2);
                    salida(x + j * e, y + i * e, e, 11);
                } else if ( * ( * ( * m + i) + j) == 3) {
                    setfillstyle(1, color2);
                    caja(x + j * e, y + i * e, e, 6);
                }
            }
        }
    }
};
class Juego {
    private:
        int tecla;
        Graficos g;
        float iCur;
        float jCur;
        int xm;
        int ym;
        int e;
        int
        color;
        int color2;
        int row;
        int col;
        matrizMapa * m;
    public:
    Juego(int tecla, float iCur, float jCur, int xm, int ym, int e, int color, int color2, int row, int col, matrizMapa * m) {
        this -> tecla = tecla;
        this -> iCur = iCur;
        this -> jCur = jCur;
        this -> xm = xm;
        this -> ym = ym;
        this -> e = e;
        this -> color = color;
        this -> color2 = color2;
        this -> row = row;
        this -> col = col;
        this -> m = m;
    }

    int jugarNivel() {
        bool completado = false;
        setcolor(13);
        outtextxy(300, 10, "LABERINTO");
        setcolor(9);
        outtextxy(100, 650, "Pulse [Esc] para salir");
        outtextxy(450, 650, "Controles: W A S D");
        outtextxy(530, 665, "(Direccionales)");

        while (completado != true && tecla != 27) {
            g.dibujarMapa(10, 20, e, color, color2, row, col, m);
            g.personaje(jCur * e, iCur * e, e, 11, 14);
            tecla = getch();
            g.personaje(jCur * e, iCur * e, e, 0, 0);

            if (tecla == 'a' || tecla == 'A' || tecla == 75) {
                if ( * ( * ( * m + xm) + (ym - 1)) == 0 || * ( * ( * m + xm) + (ym - 1)) == 2) {
                    ym--;
                    jCur--;
                }
                if ( * ( * ( * m + xm) + (ym - 1)) == 3 && * ( * ( * m + xm) + (ym - 2)) == 0) {
                    ym--;
                    jCur--;
                    *( * ( * m + xm) + (ym - 1)) = 3;
                    *( * ( * m + xm) + ym) = 0;
                }
            }
            if (tecla == 'd' || tecla == 'D' || tecla == 77) {
                if ( * ( * ( * m + xm) + (ym + 1)) == 0 || * ( * ( * m + xm) + (ym + 1)) == 2) {
                    jCur++;
                    ym++;
                }
                if ( * ( * ( * m + xm) + (ym + 1)) == 3 && * ( * ( * m + xm) + (ym + 2)) == 0) {
                    jCur++;
                    ym++;
                    *( * ( * m + xm) + (ym + 1)) = 3;
                    *( * ( * m + xm) + ym) = 0;
                }
            }
            if (tecla == 'w' || tecla == 'W' || tecla == 72) {
                if ( * ( * ( * m + (xm - 1)) + ym) == 0 || * ( * ( * m + (xm - 1)) + ym) == 2) {
                    iCur--;
                    xm--;
                }
                if ( * ( * ( * m + (xm - 1)) + ym) == 3 && * ( * ( * m + (xm - 2)) + ym) == 0) {
                    iCur--;
                    xm--;
                    *( * ( * m + (xm - 1)) + ym) = 3;
                    *( * ( * m + (xm)) + ym) = 0;
                }
            }
            if (tecla == 's' || tecla == 'S' || tecla == 80) {
                if ( * ( * ( * m + (xm + 1)) + ym) == 0 || * ( * ( * m + (xm + 1)) + ym) == 2) {
                    iCur++;
                    xm++;
                }
                if ( * ( * ( * m + (xm + 1)) + ym) == 3 && * ( * ( * m + (xm + 2)) + ym) == 0) {
                    iCur++;
                    xm++;
                    *( * ( * m + (xm + 1)) + ym) = 3;
                    *( * ( * m + (xm)) + ym) = 0;
                }
            }
            if ( * ( * ( * m + xm) + ym) == 2) {
                completado = true;
                cleardevice();
                setcolor(10);
                outtextxy(280, 250, "NIVEL COMPLETADO");
                outtextxy(210, 300, "Pulse cualquier tecla para continuar");
                getch();
                cleardevice();
                return 0;
            }
            if (tecla == 27) {
                return 27;
            }
        }
        return 27;
    }
};

int main() {
    initwindow(700, 700);
    int eJuego = 0;
    Juego * j;
    j = new Juego(eJuego, 10.4, 7.25, 10, 7, 50, 4, 13, 12, 13, & map1);
    eJuego = j -> jugarNivel();
    j = new Juego(eJuego, 16.6, 9.35, 16, 9, 33, 10, 4, 18, 20, & map2);
    eJuego = j -> jugarNivel();
    j = new Juego(eJuego, 2.15, 1.6, 1, 1, 18, 5, 14, 29, 37, & map3);
    eJuego = j -> jugarNivel();
    cleardevice();
    setcolor(10);
    outtextxy(100, 640, "FIN DEL JUEGO");
    getch();
    closegraph();
    return 0;
}
